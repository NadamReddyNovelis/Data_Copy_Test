name: Trigger Job-run for Data-Copy

on:
  workflow_dispatch:
    inputs:
      REGION:
        description: "Region"
        required: true
      SYSTEM:
        description: "System"
        required: true
      PLANT:
        description: "Plant"
        required: true
      TABLES_LIST:
        description: "Tables List"
        required: true
      INGESTION_LAYER:
        description: "Ingestion Layer"
        required: true
      FROM_ENV:
        description: "Source Environment"
        required: true
      TO_ENV:
        description: "Target Environment"
        required: true
      OPERATION_TYPE:
        description: "Operation Type (CLONE, CREATE)"
        required: true

env:
  SYSTEM: ${{ github.event.inputs.SYSTEM }}
  REGION: ${{ github.event.inputs.REGION }}
  PLANT: ${{ github.event.inputs.PLANT }}
  TABLES_LIST: ${{ github.event.inputs.TABLES_LIST }}
  INGESTION_LAYER: ${{ github.event.inputs.INGESTION_LAYER }}
  FROM_ENV: ${{ github.event.inputs.FROM_ENV }}
  TO_ENV: ${{ github.event.inputs.TO_ENV }}
  OPERATION_TYPE: ${{ github.event.inputs.OPERATION_TYPE }}

jobs:
  Debug-Input-Params:
    runs-on: ubuntu-latest
    steps:
      - name: Debug INPUT Params
        run: |
          echo "SYSTEM=${{ env.SYSTEM }}"
          echo "REGION=${{ env.REGION }}"
          echo "PLANT=${{ env.PLANT }}"
          echo "TABLES_LIST=${{ env.TABLES_LIST }}"
          echo "INGESTION_LAYER=${{ env.INGESTION_LAYER }}"
          echo "FROM_ENV=${{ env.FROM_ENV }}"
          echo "TO_ENV=${{ env.TO_ENV }}"
          echo "OPERATION_TYPE=${{ env.OPERATION_TYPE }}"


  Validate-Params:
    needs: Debug-Input-Params
    runs-on: ubuntu-latest
    steps:
      - name: Run Python Script Inline
        shell: python
        run: |
          from_env = "${{ env.FROM_ENV }}"
          to_env = "${{ env.TO_ENV }}"
          op_type = "${{ env.OPERATION_TYPE }}"
          
          env_hierarchy = [['PROD'], ['QA', 'PREPROD'], ['DEV', 'SIT']]
          valid_op_types = ['CREATE', 'CLONE']

          if op_type in valid_op_types:
              print(f'Validation Passed: OPERATION_TYPE - {op_type}')
          else:
              print(f'Validation Failed: OPERATION_TYPE - {op_type}')
              exit(1)
          
          from_env_h, to_env_h = None, None
          for idx, env_list in enumerate(env_hierarchy):
              for env in env_list:
                  if env == from_env:
                      from_env_h = idx
                  if env == to_env:
                      to_env_h = idx
                  if from_env_h is not None and to_env_h is not None: break
          if from_env_h is None or to_env_h is None: 
              print(f'Validation Failed: FROM_ENV - {from_env} and TO_ENV - {to_env} should be among: {env_hierarchy}')
              exit(1)
          if from_env_h > to_env_h:
              print('Validation Failed: FROM_ENV - {from_env} cannot be a higher env than TO_ENV - {to_env}')
              exit(1)
          print(f'Validation Passed: FROM_ENV - {from_env} > TO_ENV - {to_env}')
  
          
  Trigger-Workflow:
    needs: Validate-Params
    environment: Data-Copy_OPS
    runs-on: ubuntu-latest
    steps:
      - name: Prepare WORKSPACE-LEVEL Variables
        id: prepare-env
        run: |
          if [[ "${{ env.FROM_ENV }}" == "PROD" ]]; then
            ENV_GROUP="PROD"
          elif [[ "${{ env.FROM_ENV }}" == "QA" || "${{ env.FROM_ENV }}" == "PREPROD" ]]; then
            ENV_GROUP="QA"
          elif [[ "${{ env.FROM_ENV }}" == "DEV" || "${{ env.FROM_ENV }}" == "SIT" ]]; then
            ENV_GROUP="DEV"
          fi
          
          echo "WORKSPACE_INSTANCE=${ENV_GROUP}_DATABRICKS_INSTANCE" >> $GITHUB_ENV
          echo "WORKSPACE_TOKEN=${ENV_GROUP}_DATABRICKS_TOKEN" >> $GITHUB_ENV
          echo "JOB_ID=${ENV_GROUP}_JOB_ID" >> $GITHUB_ENV
      
      - name: Prepare Notebook Params
        run: |
          NOTEBOOK_PARAMS='\{"SYSTEM": "${{ env.SYSTEM }}", "REGION": "${{ env.REGION }}", "PLANT": "${{ env.PLANT }}", "COMMA SEPARATED TABLE LIST": "${{ env.TABLES_LIST }}", "INGESTION_LAYER": "${{ env.INGESTION_LAYER }}", "FROM_ENV": "${{ env.FROM_ENV }}", "TO_ENV": "${{ env.TO_ENV }}", "OPERATION_TYPE": "${{ env.OPERATION_TYPE }}"\}'
          echo "NOTEBOOK_PARAMS=$NOTEBOOK_PARAMS" >> $GITHUB_ENV
          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Required Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Trigger Databricks Workflow
        env:
          WORKSPACE_INSTANCE: ${{ secrets[env.WORKSPACE_INSTANCE] }}
          WORKSPACE_TOKEN: ${{ secrets[env.WORKSPACE_TOKEN] }}
          JOB_ID: ${{ vars[env.JOB_ID] }}
          NOTEBOOK_PARAMS: ${{ env.NOTEBOOK_PARAMS }}
        run: python databricks_workflow_trigger.py
