name: Trigger Job-run for Data-Copy

on:
  workflow_dispatch:
    inputs:
      REGION:
        description: "Region"
        required: true
      SYSTEM:
        description: "System"
        required: true
      PLANT:
        description: "Plant"
        required: true
      TABLES_LIST:
        description: "Tables List"
        required: true
      INGESTION_LAYER:
        description: "Ingestion Layer"
        required: true 
      FROM_ENV:
        description: "Source Environment"
        required: true
      TO_ENV:
        description: "Target Environment"
        required: true
      OPERATION_TYPE:
        description: "Operation Type (CLONE, CREATE)"
        required: true

env:
  SYSTEM: ${{ github.event.inputs.SYSTEM }}
  REGION: ${{ github.event.inputs.REGION }}
  PLANT: ${{ github.event.inputs.PLANT }}
  TABLES_LIST: ${{ github.event.inputs.TABLES_LIST }}
  INGESTION_LAYER: ${{ github.event.inputs.INGESTION_LAYER }}
  FROM_ENV: ${{ github.event.inputs.FROM_ENV }}
  TO_ENV: ${{ github.event.inputs.TO_ENV }}
  OPERATION_TYPE: ${{ github.event.inputs.OPERATION_TYPE }}

jobs:
  Debug-Input-Params:
    runs-on: ubuntu-latest
    steps:
      - name: Debug INPUT Params
        run: |
          echo "SYSTEM=${{ env.SYSTEM }}"
          echo "REGION=${{ env.REGION }}"
          echo "PLANT=${{ env.PLANT }}"
          echo "TABLES_LIST=${{ env.TABLES_LIST }}"
          echo "INGESTION_LAYER=${{ env.INGESTION_LAYER }}"
          echo "FROM_ENV=${{ env.FROM_ENV }}"
          echo "TO_ENV=${{ env.TO_ENV }}"
          echo "OPERATION_TYPE=${{ env.OPERATION_TYPE }}"


  Wait-for-Approval:
    environment: Admin
    runs-on: ubuntu-latest
    steps:
    - name: Placeholder Step
      run: echo "Waiting for Approval"
    

  Validate-Params:
    needs: Debug-Input-Params
    runs-on: ubuntu-latest
    steps:
      - name: Run Python Script Inline
        shell: python
        run: |
          git_branch = "${{ github.head_ref || github.ref }}".split('/')[-1].upper()
          from_env = "${{ env.FROM_ENV }}".upper()
          to_env = "${{ env.TO_ENV }}".upper()
          op_type = "${{ env.OPERATION_TYPE }}".upper()
          
          validation_flag = True
          env_hierarchy = [['PROD'], ['QA', 'PREPROD'], ['DEV', 'SIT']]
          valid_op_types = ['CREATE', 'CLONE']

          if op_type not in valid_op_types:
              print(f'Validation FAILED: Invalid OPERATION_TYPE - {op_type}')
              validation_flag = False

          from_env_idx, to_env_idx, branch_idx = None, None, None
          for idx, env_list in enumerate(env_hierarchy):
              for env in env_list:
                  if env == from_env:
                      from_env_idx = idx
                  if env == to_env:
                      to_env_idx = idx
                  if env == git_branch:
                      branch_idx = idx
                  if from_env_idx is not None and to_env_idx is not None and branch_idx is not None: break
          if branch_idx is not None:
              if branch_idx > from_env_idx:
                  print(f'FROM_ENV - {from_env} cannot be executed in a lower ENV - {git_branch}')
              validation_flag = False
          if from_env_idx is None or to_env_idx is None: 
              print(f'Validation Failed: FROM_ENV - {from_env} and TO_ENV - {to_env} should be among: {[elm for lst in env_hierarchy for elm in lst]}')
              validation_flag = False
          if from_env_idx > to_env_idx:
              print(f'Validation Failed: FROM_ENV - {from_env} cannot be a higher env than TO_ENV - {to_env}')
              validation_flag = False

          if validation_flag:
              print('--Valid Parameters passed--')
          else: print('--Invalid Parameters passed--')

          
  Trigger-Workflow:
    needs: Validate-Params
    environment: Data-Copy_OPS-DEV
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Notebook Params
        run: |
          NOTEBOOK_PARAMS=$(jq -c -n \
            --arg system "${{ env.SYSTEM }}" \
            --arg region "${{ env.REGION }}" \
            --arg plant "${{ env.PLANT }}" \
            --arg tables_list "${{ env.TABLES_LIST }}" \
            --arg ingestion_layer "${{ env.INGESTION_LAYER }}" \
            --arg from_env "${{ env.FROM_ENV }}" \
            --arg to_env "${{ env.TO_ENV }}" \
            --arg operation_type "${{ env.OPERATION_TYPE }}" \
            '{SYSTEM: $system, REGION: $region, PLANT: $plant, "COMMA SEPERATED TABLES LIST": $tables_list, INGESTION_LAYER: $ingestion_layer, FROM_ENV: $from_env, TO_ENV: $to_env, OPERATION_TYPE: $operation_type}')
          echo "$NOTEBOOK_PARAMS"
          echo "NOTEBOOK_PARAMS=$NOTEBOOK_PARAMS" >> $GITHUB_ENV
          
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref || github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Required Packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Trigger Databricks Workflow
        env:
          WORKSPACE_INSTANCE: ${{ vars.WORKSPACE_INSTANCE }}
          WORKSPACE_TOKEN: ${{ secrets.WORKSPACE_TOKEN }}
          JOB_ID: ${{ vars.JOB_ID }}
          NOTEBOOK_PARAMS: ${{ env.NOTEBOOK_PARAMS }}
        run: python databricks_workflow_trigger.py
