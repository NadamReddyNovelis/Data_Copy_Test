name: Trigger Job-run for Data-Copy

on:
  workflow_dispatch:
    inputs:
      REGION:
        description: "Region"
        required: true
      SYSTEM:
        description: "System"
        required: true
      PLANT:
        description: "Plant"
        required: true
      TABLES_LIST:
        description: "Tables List"
        required: true
      INGESTION_LAYER:
        description: "Ingestion Layer"
        required: true
      FROM_ENV:
        description: "Source Environment"
        required: true
      TO_ENV:
        description: "Target Environment"
        required: true
      OPERATION_TYPE:
        description: "Operation Type (CLONE, CREATE)"
        required: true

env:
  SYSTEM: ${{ github.event.inputs.SYSTEM }}
  REGION: ${{ github.event.inputs.REGION }}
  PLANT: ${{ github.event.inputs.PLANT }}
  TABLES_LIST: ${{ github.event.inputs.TABLES_LIST }}
  INGESTION_LAYER: ${{ github.event.inputs.INGESTION_LAYER }}
  FROM_ENV: ${{ github.event.inputs.FROM_ENV }}
  TO_ENV: ${{ github.event.inputs.TO_ENV }}
  OPERATION_TYPE: ${{ github.event.inputs.OPERATION_TYPE }}

jobs:
  Debug-Input-Params:
    runs-on: ubuntu-latest
    steps:
      - name: Debug INPUT Params
        run: |
          echo "SYSTEM=${{ env.SYSTEM }}"
          echo "REGION=${{ env.REGION }}"
          echo "PLANT=${{ env.PLANT }}"
          echo "TABLES_LIST=${{ env.TABLES_LIST }}"
          echo "INGESTION_LAYER=${{ env.INGESTION_LAYER }}"
          echo "FROM_ENV=${{ env.FROM_ENV }}"
          echo "TO_ENV=${{ env.TO_ENV }}"
          echo "OPERATION_TYPE=${{ env.OPERATION_TYPE }}"


  Validate-Params:
    needs: Debug-Input-Params
    runs-on: ubuntu-latest
    steps:
      - name: Validate Inputs
        run: |
          echo "Validating input parameters..."

          accepted_op_types=("CLONE" "CREATE" "CLONE-CREATE")
          accepted_env=("PROD" "QA" "PREPROD" "DEV" "SIT")
          
          if ! [[ "${accepted_op_types[@]}" =~ "${{ env.OPERATION_TYPE }}" ]]; then
            echo "Invalid OPERATION_TYPE: ${{ env.OPERATION_TYPE }}. Must be one of: CLONE, CREATE, CLONE-CREATE."
            exit 1
          fi

          if ! [[ "${accepted_env[@]}" =~ "${{ env.FROM_ENV }}" ]]; then
            echo "Invalid TO_ENV: ${{ env.FROM_ENV }}"
            exit 1
          fi
          if ! [[ "${accepted_env[@]}" =~ "${{ env.TO_ENV }}" ]]; then
            echo "Invalid TO_ENV: ${{ env.TO_ENV }}"
            exit 1
          fi
  
          
  test_env:
    environment: TEST_SECRET
    runs-on: ubuntu-latest
    steps:
      - name: Prepare WORKSPACE-LEVEL Variables
        id: prepare-env
        run: |
          if [[ "${{ env.FROM_ENV }}" == "PROD" ]]; then
            ENV_GROUP="PROD"
          elif [[ "${{ env.FROM_ENV }}" == "QA" || "${{ env.FROM_ENV }}" == "PREPROD" ]]; then
            ENV_GROUP="QA"
          elif [[ "${{ env.FROM_ENV }}" == "DEV" || "${{ env.FROM_ENV }}" == "SIT" ]]; then
            ENV_GROUP="DEV"
          fi
          
          echo "WORKSPACE_INSTANCE=${ENV_GROUP}_DATABRICKS_INSTANCE" >> $GITHUB_ENV
          echo "WORKSPACE_TOKEN=${ENV_GROUP}_DATABRICKS_TOKEN" >> $GITHUB_ENV
          echo "JOB_ID=${ENV_GROUP}_JOB_ID" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
          
      - name: Test env vars for python
        run: python -c 'import os;print(os.environ)'
        env:
          ENV_SECRET: ${{ secrets[env.WORKSPACE_INSTANCE] }} 
          REPO_SECRET: ${{ secrets[env.WORKSPACE_TOKEN] }} 
