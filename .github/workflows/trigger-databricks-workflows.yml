name: Trigger Job-run for Data-Copy

on:
  workflow_dispatch:
    inputs:
      REGION:
        description: "Region"
        required: true
      SYSTEM:
        description: "System"
        required: true
      PLANT:
        description: "Plant"
        required: true
      TABLES_LIST:
        description: "Tables List"
        required: true
      INGESTION_LAYER:
        description: "Ingestion Layer"
        required: true
      FROM_ENV:
        description: "Source Environment"
        required: true
      TO_ENV:
        description: "Target Environment"
        required: true
      OPERATION_TYPE:
        description: "Operation Type (CLONE, CREATE)"
        required: true

env:
  SYSTEM: ${{ github.event.inputs.SYSTEM }}
  REGION: ${{ github.event.inputs.REGION }}
  PLANT: ${{ github.event.inputs.PLANT }}
  TABLES_LIST: ${{ github.event.inputs.TABLES_LIST }}
  INGESTION_LAYER: ${{ github.event.inputs.INGESTION_LAYER }}
  FROM_ENV: ${{ github.event.inputs.FROM_ENV }}
  TO_ENV: ${{ github.event.inputs.TO_ENV }}
  OPERATION_TYPE: ${{ github.event.inputs.OPERATION_TYPE }}

jobs:
  Verify-Params:
    runs-on: ubuntu-latest
    steps:
      - name: Debug INPUT Params
        run: |
          echo "SYSTEM=${{ env.SYSTEM }}"
          echo "REGION=${{ env.REGION }}"
          echo "PLANT=${{ env.PLANT }}"
          echo "TABLES_LIST=${{ env.TABLES_LIST }}"
          echo "INGESTION_LAYER=${{ env.INGESTION_LAYER }}"
          echo "FROM_ENV=${{ env.FROM_ENV }}"
          echo "TO_ENV=${{ env.TO_ENV }}"
          echo "OPERATION_TYPE=${{ env.OPERATION_TYPE }}"


  Validate-Params:
    needs: Verify-Params
    runs-on: ubuntu-latest
    steps:
      - name: Validate Inputs
        run: |
          echo "Validating input parameters..."

          accepted_op_types=("CLONE" "CREATE" "CLONE-CREATE")
          accepted_env=("PROD" "QA" "PREPROD" "DEV" "SIT")
          
          if ! [[ "${accepted_op_types[@]}" =~ "${{ env.OPERATION_TYPE }}" ]]; then
            echo "Invalid OPERATION_TYPE: ${{ env.OPERATION_TYPE }}. Must be one of: CLONE, CREATE, CLONE-CREATE."
            exit 1
          fi

          if ! [[ "${accepted_env[@]}" =~ "${{ env.FROM_ENV }}" ]]; then
            echo "Invalid TO_ENV: ${{ env.FROM_ENV }}"
            exit 1
          fi
          if ! [[ "${accepted_env[@]}" =~ "${{ env.TO_ENV }}" ]]; then
            echo "Invalid TO_ENV: ${{ env.TO_ENV }}"
            exit 1
          fi
          

  clone-or-create:
    needs: Validate-Params
    runs-on: ubuntu-latest
    environment: Data-Copy_OPS
    steps:
      - name: Prepare WORKSPACE-LEVEL Variables
        id: prepare-env
        run: |
          if [[ "${{ env.FROM_ENV }}" == "PROD" ]]; then
            ENV_GROUP="PROD"
          elif [[ "${{ env.FROM_ENV }}" == "QA" || "${{ env.FROM_ENV }}" == "PREPROD" ]]; then
            ENV_GROUP="QA"
          elif [[ "${{ env.FROM_ENV }}" == "DEV" || "${{ env.FROM_ENV }}" == "SIT" ]]; then
            ENV_GROUP="DEV"
          fi
          
          echo "WORKSPACE_INSTANCE=${ENV_GROUP}_DATABRICKS_INSTANCE" >> $GITHUB_ENV
          echo "WORKSPACE_TOKEN=${ENV_GROUP}_DATABRICKS_TOKEN" >> $GITHUB_ENV
          echo "JOB_ID=${ENV_GROUP}_JOB_ID" >> $GITHUB_ENV
          
      - name: Trigger Databricks Workflow run
        run: |
          echo "Triggering Databricks Workflow for ${{ env.OPERATION_TYPE }} Activity..."
          
          response=$(curl -X POST "https://adb-${{ secrets[env.WORKSPACE_INSTANCE] }}.azuredatabricks.net/api/2.1/jobs/run-now" \
                          -H "Authorization: Bearer ${{ secrets[env.WORKSPACE_TOKEN] }}" \
                          -H "Content-Type: application/json" \
                          -d '{
                                "job_id": ${{ vars[env.JOB_ID] }},
                                "notebook_params": {
                                  "SYSTEM": "${{ env.SYSTEM }}",
                                  "REGION": "${{ env.REGION }}",
                                  "PLANT": "${{ env.PLANT }}",
                                  "COMA SEPARATED TABLE LIST": "${{ env.TABLES_LIST }}",
                                  "INGESTION_LAYER": "${{ env.INGESTION_LAYER }}",
                                  "FROM_ENV": "${{ env.FROM_ENV }}",
                                  "TO_ENV": "${{ env.TO_ENV }}",
                                  "OPERATION_TYPE": "${{ env.OPERATION_TYPE }}"
                                }
                             }')

          run_id=$(echo "${response}" | grep -o '"run_id":[0-9]*' | cut -d ":" -f 2)
          if [[ -z "$run_id" ]]; then
              echo "API Response had no value for run_id."
              echo "API Response: ${response}"
              exit 1
          else
              echo "Run_ID extracted from API response: ${run_id}"
              echo "RUN_ID=${run_id}" >> $GITHUB_ENV
          fi
          
      - name: Polling for Job-run status
        run: |
          echo "Wait for the job to complete at: /jobs/${{ vars[env.JOB_ID] }}/runs/${{ env.RUN_ID }}"
          while true; do
            RUN_STATUS=$(curl -X GET https://adb-${{ secrets[env.WORKSPACE_INSTANCE] }}.azuredatabricks.net/api/2.1/jobs/runs/get?run_id=${{ env.RUN_ID }} \
                              -H "Authorization: Bearer ${{ secrets[env.WORKSPACE_TOKEN] }}")
            
            LIFECYCLE_STATE=$(echo "$RUN_STATUS" | jq -r '.state.life_cycle_state')
            RESULT_STATE=$(echo "$RUN_STATUS" | jq -r '.state.result_state')
        
            if [[ "${LIFECYCLE_STATE}" == "TERMINATED" || "${LIFECYCLE_STATE}" == "SKIPPED" || "${LIFECYCLE_STATE}" == "INTERNAL_ERROR" ]]; then
                echo "Job completed with lifecycle state: ${LIFECYCLE_STATE} and result state: ${RESULT_STATE}."
                if [[ "${RESULT_STATE}" == "SUCCESS" ]]; then
                    exit 0
                else
                    exit 1
                fi
            else
                echo "Job's current state: ${LIFECYCLE_STATE}. Waiting for 15 another seconds..."
                sleep 15
            fi
          done
